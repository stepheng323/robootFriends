{"version":3,"sources":["Components/Robots.js","Components/card.jsx","Components/CardList.js","Components/Search.js","Components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["robotsList","id","name","email","Card","className","src","alt","CardList","cardarray","robots","map","robot","key","Search","searchChange","type","placeholder","onChange","Scroll","children","style","overflow","height","App","useState","search","setSearch","filteredRobots","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAAaA,G,MAAa,CACzB,CACCC,GAAI,EACJC,KAAM,mBACNC,MAAO,yBAER,CACCF,GAAI,EACJC,KAAM,cACNC,MAAO,yBAER,CACCF,GAAI,EACJC,KAAM,iBACNC,MAAO,uBAER,CACCF,GAAI,EACJC,KAAM,cACNC,MAAO,qBAER,CACCF,GAAI,EACJC,KAAM,sBACNC,MAAO,0BAER,CACCF,GAAI,EACJC,KAAM,cACNC,MAAO,2BCdMC,G,MAZF,SAAC,GAAyB,IAAvBH,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,yBAAKE,UAAU,QACd,yBAAKC,IAAG,+BAA0BL,EAA1B,iBAA6CM,IAAI,WACzD,yBAAKF,UAAU,aACd,4BAAKH,GACL,2BAAIC,OCQOK,EAdE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACMC,KAAI,SAAAC,GAC5B,OACC,kBAAC,EAAD,CACCC,IAAKD,EAAMX,GACXA,GAAIW,EAAMX,GACVC,KAAMU,EAAMV,KACZC,MAAOS,EAAMT,WAIhB,OAAO,yBAAKE,UAAU,YAAYI,ICCpBK,EAbA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACC,yBAAKV,UAAU,mBACd,2BACCA,UAAU,QACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,EARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACE,yBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,UACpCH,ICuBQI,EArBH,WAAO,IAAD,EACWC,mBAASzB,GADpB,mBACVU,EADU,aAEWe,mBAAS,KAFpB,mBAEVC,EAFU,KAEFC,EAFE,KAOXC,EAAiBlB,EAAOmB,QAAO,SAAAjB,GACpC,OAAOA,EAAMV,KAAK4B,cAAcC,SAASL,EAAOI,kBAEjD,OACC,yBAAKzB,UAAU,OACd,wBAAIA,UAAU,UAAd,iBACA,kBAAC,EAAD,CAAQU,aATa,SAAAiB,GACtBL,EAAUK,EAAEC,OAAOC,UASlB,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUxB,OAAQkB,OCVFO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.76304571.chunk.js","sourcesContent":["export const robotsList = [\n\t{\n\t\tid: 1,\n\t\tname: 'abiodun oyebanji',\n\t\temail: 'stepheng323@gmail.com'\n\t},\n\t{\n\t\tid: 2,\n\t\tname: 'james blunt',\n\t\temail: 'stepheng323@gmail.com'\n\t},\n\t{\n\t\tid: 3,\n\t\tname: 'phill morisson',\n\t\temail: 'pheilmaen@yahoo.com'\n\t},\n\t{\n\t\tid: 4,\n\t\tname: 'steven bane',\n\t\temail: 'fitrim3@gmail.com'\n\t},\n\t{\n\t\tid: 5,\n\t\tname: 'allison copperfield',\n\t\temail: 'acopperfield@gmail.com'\n\t},\n\t{\n\t\tid: 6,\n\t\tname: 'jeff beacon',\n\t\temail: 'jeffbeac343@gmail.com'\n\t}\n];\n","import React from 'react';\nimport './card.css';\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className='card'>\n\t\t\t<img src={`https://robohash.org/${id}?size=180x200`} alt='robots' />\n\t\t\t<div className='user-info'>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './card';\n\nconst CardList = ({ robots }) => {\n\tconst cardarray = robots.map(robot => {\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tkey={robot.id}\n\t\t\t\tid={robot.id}\n\t\t\t\tname={robot.name}\n\t\t\t\temail={robot.email}\n\t\t\t/>\n\t\t);\n\t});\n\treturn <div className='cardlist'>{cardarray}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst Search = ({ searchChange }) => {\n\treturn (\n\t\t<div className='input-container'>\n\t\t\t<input\n\t\t\t\tclassName='input'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search Robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t></input>\n\t\t</div>\n\t);\n};\n\nexport default Search;\n","import React from 'react';\n\nconst Scroll = ({children}) => {\n  return(\n    <div style={{overflow:'scroll', height:'500px'}}>\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { robotsList } from './Components/Robots';\nimport CardList from './Components/CardList';\nimport Search from './Components/Search';\nimport Scroll from './Components/Scroll';\n\nconst App = () => {\n\tconst [robots, setRobots] = useState(robotsList);\n\tconst [search, setSearch] = useState('');\n\n\tconst onSearchChange = e => {\n\t\tsetSearch(e.target.value);\n\t};\n\tconst filteredRobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(search.toLowerCase());\n\t});\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1 className='header'>Robot Friends</h1>\n\t\t\t<Search searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}