{"version":3,"sources":["Components/card.jsx","Components/CardList.js","Components/Search.js","Components/Home.js","Components/RobotDetails.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardarray","robots","map","robot","to","key","Search","searchChange","type","placeholder","onChange","Home","useState","setRobots","search","setSearch","useEffect","fetchData","a","async","fetch","data","json","items","filteredRobots","filter","toLowerCase","includes","e","target","value","RobotDetails","match","setRobot","image","setImage","params","username","phone","website","Fragment","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4f426d6.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className='card'>\n\t\t\t<img src={`https://robohash.org/${id}?size=180x200`} alt='robots' />\n\t\t\t<div className='user-info'>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './card';\nimport { Link } from 'react-router-dom';\n\nconst CardList = ({ robots }) => {\n\tconst cardarray = robots.map(robot => {\n\t\treturn (\n\t\t\t<Link to={`/robot/${robot.id}`}>\n\t\t\t\t<Card\n\t\t\t\t\tkey={robot.id}\n\t\t\t\t\tid={robot.id}\n\t\t\t\t\tname={robot.name}\n\t\t\t\t\temail={robot.email}\n\t\t\t\t/>\n\t\t\t</Link>\n\t\t);\n\t});\n\treturn <div className='cardlist'>{cardarray}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst Search = ({ searchChange }) => {\n\treturn (\n\t\t<div className='input-container'>\n\t\t\t<input\n\t\t\t\tclassName='input'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search Robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t></input>\n\t\t</div>\n\t);\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport CardList from './CardList';\nimport Search from './Search';\n\nconst Home = () => {\n\n\tconst [robots, setRobots] = useState([]);\n\tconst [search, setSearch] = useState('');\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\tconst fetchData = async () => {\n\t\tconst data = await fetch('https://jsonplaceholder.typicode.com/users');\n\t\tconst items = await data.json();\n\t\tsetRobots(items);\n\t};\n\n\tconst onSearchChange = e => {\n\t\tsetSearch(e.target.value);\n\t};\n\tconst filteredRobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(search.toLowerCase());\n\t});\n\treturn (\n\t\t<div>\n\t\t\t<h1 className='header'>Robot Friends</h1>\n\t\t\t<Search searchChange={onSearchChange} />\n\t\t\t<CardList robots={filteredRobots} />\n\t\t</div>\n\t);\n};\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst RobotDetails = ({match}) => {\n\tconst [robot, setRobot] = useState([]);\n\tconst [image, setImage] = useState('');\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\tconst fetchData = async () => {\n\t\tconst {id} = match.params;\n\t\tconst data = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);\n\t\tconst items =  await data.json();\n\t\tsetImage(`https://robohash.org/${id}?size=200x200`);\n\t\tsetRobot(items);\n\t};\nconst {name, username,email, phone, website} = robot;\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Link to={'/'}>\n\t\t\t\t<h1 className='header'>Robot Friends</h1>\n\t\t\t</Link>\n\t\t\t<div className='details'>\n\t\t\t\t<div className='detailsHeader'>\n\t\t\t\t\t<h2>Robot Friends</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className='body'>\n\t\t\t\t\t<div className='img'>\n\t\t\t\t\t\t<img src={image} alt='robots'></img>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='info'>\n\t\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tMy nickname is {username} my email is {email} and phone is {phone}. i am a\n\t\t\t\t\t\t\trobot from the future, i have come to teach you certain things\n\t\t\t\t\t\t\tabout the universe. you can call me on my phone or visit my\n\t\t\t\t\t\t\twebsite {website}. Dont tell anyone about me, i am the only surviving robot\n\t\t\t\t\t\t\tin my clan\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<Link>\n\t\t\t\t\t\t\t<button className='btn'>Visit website</button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default RobotDetails;\n","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home' \nimport RobotDetails from './Components/RobotDetails';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\n\nconst App = () => {\n\treturn (\n\t\t<Router>\n\t\t\t\t<div className='App'>\n\t\t\t\t\t<Route path=\"/\" exact component={ Home }/>\n\t\t\t\t\t<Route path=\"/robot/:id\" component={RobotDetails} />\n\t\t\t\t</div>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}